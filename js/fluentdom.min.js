/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@fluent/dom@0.10.0/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!(function (e, t) {
  "object" == typeof exports && "undefined" != typeof module
    ? t(exports, require("cached-iterable"))
    : "function" == typeof define && define.amd
    ? define("@fluent/dom", ["exports", "cached-iterable"], t)
    : t(
        ((e =
          "undefined" != typeof globalThis ? globalThis : e || self).FluentDOM =
          {}),
        e.CachedIterable
      );
})(this, function (e, t) {
  "use strict";
  const n = /<|&#?\w+;/,
    r = {
      "http://www.w3.org/1999/xhtml": [
        "em",
        "strong",
        "small",
        "s",
        "cite",
        "q",
        "dfn",
        "abbr",
        "data",
        "time",
        "code",
        "var",
        "samp",
        "kbd",
        "sub",
        "sup",
        "i",
        "b",
        "u",
        "mark",
        "bdi",
        "bdo",
        "span",
        "br",
        "wbr",
      ],
    },
    s = {
      "http://www.w3.org/1999/xhtml": {
        global: ["title", "aria-label", "aria-valuetext"],
        a: ["download"],
        area: ["download", "alt"],
        input: ["alt", "placeholder"],
        menuitem: ["label"],
        menu: ["label"],
        optgroup: ["label"],
        option: ["label"],
        track: ["label"],
        img: ["alt"],
        textarea: ["placeholder"],
        th: ["abbr"],
      },
      "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul": {
        global: [
          "accesskey",
          "aria-label",
          "aria-valuetext",
          "label",
          "title",
          "tooltiptext",
        ],
        description: ["value"],
        key: ["key", "keycode"],
        label: ["value"],
        textbox: ["placeholder", "value"],
      },
    };
  function a(e, t) {
    const { value: r } = t;
    if ("string" == typeof r)
      if (
        "title" === e.localName &&
        "http://www.w3.org/1999/xhtml" === e.namespaceURI
      )
        e.textContent = r;
      else if (n.test(r)) {
        const t = e.ownerDocument.createElementNS(
          "http://www.w3.org/1999/xhtml",
          "template"
        );
        (t.innerHTML = r),
          (function (e, t) {
            for (const n of e.childNodes)
              if (n.nodeType !== n.TEXT_NODE)
                if (n.hasAttribute("data-l10n-name")) {
                  const r = l(t, n);
                  e.replaceChild(r, n);
                } else if (d(n)) {
                  const t = u(n);
                  e.replaceChild(t, n);
                } else
                  console.warn(
                    `An element of forbidden type "${n.localName}" was found in the translation. Only safe text-level elements and elements with data-l10n-name are allowed.`
                  ),
                    e.replaceChild(c(n), n);
            (t.textContent = ""), t.appendChild(e);
          })(t.content, e);
      } else e.textContent = r;
    i(t, e);
  }
  function o(e, t) {
    if (!e) return !1;
    for (let n of e) if (n.name === t) return !0;
    return !1;
  }
  function i(e, t) {
    const n = t.hasAttribute("data-l10n-attrs")
      ? t
          .getAttribute("data-l10n-attrs")
          .split(",")
          .map((e) => e.trim())
      : null;
    for (const r of Array.from(t.attributes))
      h(r.name, t, n) && !o(e.attributes, r.name) && t.removeAttribute(r.name);
    if (e.attributes)
      for (const r of Array.from(e.attributes))
        h(r.name, t, n) &&
          t.getAttribute(r.name) !== r.value &&
          t.setAttribute(r.name, r.value);
  }
  function l(e, t) {
    const n = t.getAttribute("data-l10n-name"),
      r = e.querySelector(`[data-l10n-name="${n}"]`);
    if (!r)
      return (
        console.warn(`An element named "${n}" wasn't found in the source.`),
        c(t)
      );
    if (r.localName !== t.localName)
      return (
        console.warn(
          `An element named "${n}" was found in the translation but its type ${t.localName} didn't match the element found in the source (${r.localName}).`
        ),
        c(t)
      );
    e.removeChild(r);
    return f(t, r.cloneNode(!1));
  }
  function u(e) {
    const t = e.ownerDocument.createElement(e.localName);
    return f(e, t);
  }
  function c(e) {
    return e.ownerDocument.createTextNode(e.textContent);
  }
  function d(e) {
    const t = r[e.namespaceURI];
    return t && t.includes(e.localName);
  }
  function h(e, t, n = null) {
    if (n && n.includes(e)) return !0;
    const r = s[t.namespaceURI];
    if (!r) return !1;
    const a = e.toLowerCase(),
      o = t.localName;
    if (r.global.includes(a)) return !0;
    if (!r[o]) return !1;
    if (r[o].includes(a)) return !0;
    if (
      "http://www.w3.org/1999/xhtml" === t.namespaceURI &&
      "input" === o &&
      "value" === a
    ) {
      const e = t.type.toLowerCase();
      if ("submit" === e || "button" === e || "reset" === e) return !0;
    }
    return !1;
  }
  function f(e, t) {
    return (t.textContent = e.textContent), i(e, t), t;
  }
  class m {
    constructor(e = [], t) {
      (this.resourceIds = e), (this.generateBundles = t), this.onChange(!0);
    }
    addResourceIds(e, t = !1) {
      return (
        this.resourceIds.push(...e), this.onChange(t), this.resourceIds.length
      );
    }
    removeResourceIds(e) {
      return (
        (this.resourceIds = this.resourceIds.filter((t) => !e.includes(t))),
        this.onChange(),
        this.resourceIds.length
      );
    }
    async formatWithFallback(e, t) {
      const n = [];
      let r = !1;
      for await (const s of this.bundles) {
        r = !0;
        const a = p(t, s, e, n);
        if (0 === a.size) break;
        if ("undefined" != typeof console) {
          const e = s.locales[0],
            t = Array.from(a).join(", ");
          console.warn(`[fluent] Missing translations in ${e}: ${t}`);
        }
      }
      return (
        r ||
          "undefined" == typeof console ||
          console.warn(
            `[fluent] Request for keys failed because no resource bundles got generated.\n  keys: ${JSON.stringify(
              e
            )}.\n  resourceIds: ${JSON.stringify(this.resourceIds)}.`
          ),
        n
      );
    }
    formatMessages(e) {
      return this.formatWithFallback(e, g);
    }
    formatValues(e) {
      return this.formatWithFallback(e, b);
    }
    async formatValue(e, t) {
      const [n] = await this.formatValues([{ id: e, args: t }]);
      return n;
    }
    handleEvent() {
      this.onChange();
    }
    onChange(e = !1) {
      (this.bundles = t.CachedAsyncIterable.from(
        this.generateBundles(this.resourceIds)
      )),
        e && this.bundles.touchNext(2);
    }
  }
  function b(e, t, n, r) {
    return n.value ? e.formatPattern(n.value, r, t) : null;
  }
  function g(e, t, n, r) {
    const s = { value: null, attributes: null };
    n.value && (s.value = e.formatPattern(n.value, r, t));
    let a = Object.keys(n.attributes);
    if (a.length > 0) {
      s.attributes = new Array(a.length);
      for (let [o, i] of a.entries()) {
        let a = e.formatPattern(n.attributes[i], r, t);
        s.attributes[o] = { name: i, value: a };
      }
    }
    return s;
  }
  function p(e, t, n, r) {
    const s = [],
      a = new Set();
    return (
      n.forEach(({ id: n, args: o }, i) => {
        if (void 0 !== r[i]) return;
        let l = t.getMessage(n);
        if (l) {
          if (
            ((s.length = 0),
            (r[i] = e(t, s, l, o)),
            s.length > 0 && "undefined" != typeof console)
          ) {
            const e = t.locales[0],
              r = s.join(", ");
            console.warn(`[fluent][resolver] errors in ${e}/${n}: ${r}.`);
          }
        } else a.add(n);
      }),
      a
    );
  }
  const w = "data-l10n-id",
    v = "data-l10n-args",
    y = `[${w}]`;
  (e.DOMLocalization = class extends m {
    constructor(e, t) {
      super(e, t),
        (this.roots = new Set()),
        (this.pendingrAF = null),
        (this.pendingElements = new Set()),
        (this.windowElement = null),
        (this.mutationObserver = null),
        (this.observerConfig = {
          attributes: !0,
          characterData: !1,
          childList: !0,
          subtree: !0,
          attributeFilter: [w, v],
        });
    }
    onChange(e = !1) {
      super.onChange(e), this.roots && this.translateRoots();
    }
    setAttributes(e, t, n) {
      return (
        e.setAttribute(w, t),
        n ? e.setAttribute(v, JSON.stringify(n)) : e.removeAttribute(v),
        e
      );
    }
    getAttributes(e) {
      return {
        id: e.getAttribute(w),
        args: JSON.parse(e.getAttribute(v) || null),
      };
    }
    connectRoot(e) {
      for (const t of this.roots)
        if (t === e || t.contains(e) || e.contains(t))
          throw new Error(
            "Cannot add a root that overlaps with existing root."
          );
      if (this.windowElement) {
        if (this.windowElement !== e.ownerDocument.defaultView)
          throw new Error(
            "Cannot connect a root:\n          DOMLocalization already has a root from a different window."
          );
      } else
        (this.windowElement = e.ownerDocument.defaultView),
          (this.mutationObserver = new this.windowElement.MutationObserver(
            (e) => this.translateMutations(e)
          ));
      this.roots.add(e), this.mutationObserver.observe(e, this.observerConfig);
    }
    disconnectRoot(e) {
      return (
        this.roots.delete(e),
        this.pauseObserving(),
        0 === this.roots.size
          ? ((this.mutationObserver = null),
            this.windowElement &&
              this.pendingrAF &&
              this.windowElement.cancelAnimationFrame(this.pendingrAF),
            (this.windowElement = null),
            (this.pendingrAF = null),
            this.pendingElements.clear(),
            !0)
          : (this.resumeObserving(), !1)
      );
    }
    translateRoots() {
      const e = Array.from(this.roots);
      return Promise.all(e.map((e) => this.translateFragment(e)));
    }
    pauseObserving() {
      this.mutationObserver &&
        (this.translateMutations(this.mutationObserver.takeRecords()),
        this.mutationObserver.disconnect());
    }
    resumeObserving() {
      if (this.mutationObserver)
        for (const e of this.roots)
          this.mutationObserver.observe(e, this.observerConfig);
    }
    translateMutations(e) {
      for (const t of e)
        switch (t.type) {
          case "attributes":
            t.target.hasAttribute("data-l10n-id") &&
              this.pendingElements.add(t.target);
            break;
          case "childList":
            for (const e of t.addedNodes)
              if (e.nodeType === e.ELEMENT_NODE)
                if (e.childElementCount)
                  for (const t of this.getTranslatables(e))
                    this.pendingElements.add(t);
                else e.hasAttribute(w) && this.pendingElements.add(e);
        }
      this.pendingElements.size > 0 &&
        null === this.pendingrAF &&
        (this.pendingrAF = this.windowElement.requestAnimationFrame(() => {
          this.translateElements(Array.from(this.pendingElements)),
            this.pendingElements.clear(),
            (this.pendingrAF = null);
        }));
    }
    translateFragment(e) {
      return this.translateElements(this.getTranslatables(e));
    }
    async translateElements(e) {
      if (!e.length) return;
      const t = e.map(this.getKeysForElement),
        n = await this.formatMessages(t);
      return this.applyTranslations(e, n);
    }
    applyTranslations(e, t) {
      this.pauseObserving();
      for (let n = 0; n < e.length; n++) void 0 !== t[n] && a(e[n], t[n]);
      this.resumeObserving();
    }
    getTranslatables(e) {
      const t = Array.from(e.querySelectorAll(y));
      return (
        "function" == typeof e.hasAttribute && e.hasAttribute(w) && t.push(e), t
      );
    }
    getKeysForElement(e) {
      return {
        id: e.getAttribute(w),
        args: JSON.parse(e.getAttribute(v) || null),
      };
    }
  }),
    (e.Localization = m);
});
//# sourceMappingURL=/sm/7f47905ff52d22e45c5d39de87215b4a77e2204d70b20b93b6568f21d69bcce7.map
